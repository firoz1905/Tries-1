Time Complexity : O(len(word)), search: O(len(word)), startsWith: O(len(prefix)).
Space Complexity:O(n*l) --- Overwhelming space required to implement Prefix tree/Trie
class TrieNode:
        
        def __init__(self,v):
            self.val=v
            self.children={}
            self.isEnd=False
            
class Trie:            

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=TrieNode(None)
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        curr=self.root
        for i,char in enumerate(word):
            if char not in curr.children:
                curr.children[char]=TrieNode(char)
            curr=curr.children[char]
            if i==len(word)-1:
                curr.isEnd=True
                  

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        curr=self.root
        for char in enumerate(word):
            if char not in curr.children:
                return False
            curr=curr.children[char]
        return curr.isEnd
        

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        curr=self.root
        for char in enumerate(prefix):
            if char not in curr.children:
                return False
            curr=curr.children[char]
        return True
            
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
